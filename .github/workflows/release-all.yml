# Build the binary release version for Mac

name: Release Crynux Node using the tag name

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  push:
    tags:
      - '*'

env:
  RELEASE_VERSION: 2.5.1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:  
  actions: write
  packages: write
  contents: write

jobs:
  prepare-version:
    runs-on: ubuntu-latest
    steps:
       - run: echo "null"
    outputs:
      version: ${{ env.RELEASE_VERSION }}

  build-the-docker-images:
    strategy:
      matrix:
        blockchain:
          - dymension
          - near
          - kaspa
    name: Build the Docker image for ${{ matrix.blockchain }}
    uses: ./.github/workflows/release-all-docker.yml
    secrets: inherit
    with:
      blockchain: ${{ matrix.blockchain }}

  build-the-mac-dmgs:
    needs: [prepare-version]
    strategy:
      matrix:
        blockchain:
          - dymension
          - near
          - kaspa
    name: Build the Mac DMG for ${{ matrix.blockchain }}
    uses: ./.github/workflows/release-all-mac.yml
    secrets: inherit
    with:
      blockchain: ${{ matrix.blockchain }}
      release_version: ${{ needs.prepare-version.outputs.version }}

  build-the-windows-binaries:
    needs: [prepare-version]
    strategy:
      matrix:
        blockchain:
          - dymension
          - near
          - kaspa
    name: Build the Windows binary for ${{ matrix.blockchain }}
    uses: ./.github/workflows/release-all-windows.yml
    secrets: inherit
    with:
      blockchain: ${{ matrix.blockchain }}
      release_version: ${{ needs.prepare-version.outputs.version }}

  publish-release:
    runs-on: ubuntu-22.04
    needs:
      - build-the-windows-binaries
      - build-the-mac-dmgs
      - build-the-docker-images
    permissions:
        contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Google Drive link artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: gdrive-links-*

      - name: Read Google Drive links
        id: read_links
        run: |
          # Read Dymension links
          WINDOWS_DOWNLOAD_LINK_DYMENSION=$(tr -d '\r\n' < gdrive-links-dymension/download_link.txt | sed 's/[\x00-\x1F]//g')
          WINDOWS_PREVIEW_LINK_DYMENSION=$(tr -d '\r\n' < gdrive-links-dymension/view_link.txt | sed 's/[\x00-\x1F]//g')

          # Read Near links
          WINDOWS_DOWNLOAD_LINK_NEAR=$(tr -d '\r\n' < gdrive-links-near/download_link.txt | sed 's/[\x00-\x1F]//g')
          WINDOWS_PREVIEW_LINK_NEAR=$(tr -d '\r\n' < gdrive-links-near/view_link.txt | sed 's/[\x00-\x1F]//g')

          # Read Kaspa links
          WINDOWS_DOWNLOAD_LINK_KASPA=$(tr -d '\r\n' < gdrive-links-kaspa/download_link.txt | sed 's/[\x00-\x1F]//g')
          WINDOWS_PREVIEW_LINK_KASPA=$(tr -d '\r\n' < gdrive-links-kaspa/view_link.txt | sed 's/[\x00-\x1F]//g')

          echo "Windows download link (Dymension): ${WINDOWS_DOWNLOAD_LINK_DYMENSION}, length: ${#WINDOWS_DOWNLOAD_LINK_DYMENSION}"
          echo "Windows preview link (Dymension): ${WINDOWS_PREVIEW_LINK_DYMENSION}, length: ${#WINDOWS_PREVIEW_LINK_DYMENSION}"
          echo "Windows download link (Near): ${WINDOWS_DOWNLOAD_LINK_NEAR}, length: ${#WINDOWS_DOWNLOAD_LINK_NEAR}"
          echo "Windows preview link (Near): ${WINDOWS_PREVIEW_LINK_NEAR}, length: ${#WINDOWS_PREVIEW_LINK_NEAR}"
          echo "Windows download link (Kaspa): ${WINDOWS_DOWNLOAD_LINK_KASPA}, length: ${#WINDOWS_DOWNLOAD_LINK_KASPA}"
          echo "Windows preview link (Kaspa): ${WINDOWS_PREVIEW_LINK_KASPA}, length: ${#WINDOWS_PREVIEW_LINK_KASPA}"

          # Set outputs
          echo "WINDOWS_DOWNLOAD_LINK_DYMENSION=${WINDOWS_DOWNLOAD_LINK_DYMENSION}" >> $GITHUB_ENV
          echo "WINDOWS_PREVIEW_LINK_DYMENSION=${WINDOWS_PREVIEW_LINK_DYMENSION}" >> $GITHUB_ENV
          echo "WINDOWS_DOWNLOAD_LINK_NEAR=${WINDOWS_DOWNLOAD_LINK_NEAR}" >> $GITHUB_ENV
          echo "WINDOWS_PREVIEW_LINK_NEAR=${WINDOWS_PREVIEW_LINK_NEAR}" >> $GITHUB_ENV
          echo "WINDOWS_DOWNLOAD_LINK_KASPA=${WINDOWS_DOWNLOAD_LINK_KASPA}" >> $GITHUB_ENV
          echo "WINDOWS_PREVIEW_LINK_KASPA=${WINDOWS_PREVIEW_LINK_KASPA}" >> $GITHUB_ENV

      - name: Print the Google Drive links
        run: |
          echo "Windows download link (Dymension): ${{ env.WINDOWS_DOWNLOAD_LINK_DYMENSION }}"
          echo "Windows preview link (Dymension): ${{ env.WINDOWS_PREVIEW_LINK_DYMENSION }}"
          echo "Windows download link (Near): ${{ env.WINDOWS_DOWNLOAD_LINK_NEAR }}"
          echo "Windows preview link (Near): ${{ env.WINDOWS_PREVIEW_LINK_NEAR }}"
          echo "Windows download link (Kaspa): ${{ env.WINDOWS_DOWNLOAD_LINK_KASPA }}"
          echo "Windows preview link (Kaspa): ${{ env.WINDOWS_PREVIEW_LINK_KASPA }}"

      - name: Download Mac DMGs
        uses: actions/download-artifact@v4
        with:
          pattern: mac-app-${{ env.RELEASE_VERSION }}-*

      - name: Move Mac DMGs
        run: |
          ls -lR mac-app*
          mv mac-app*/* ./

      - name: Print the workspace
        run: |
          ls -l

      - name: Generate the changelog
        run: |
          # Escape the links for sed
          windows_dymension_link_escaped=$(printf '%s\n' "${{ env.WINDOWS_DOWNLOAD_LINK_DYMENSION }}" | sed -e 's/[\/&]/\\&/g')
          windows_near_link_escaped=$(printf '%s\n' "${{ env.WINDOWS_DOWNLOAD_LINK_NEAR }}" | sed -e 's/[\/&]/\\&/g')
          windows_kaspa_link_escaped=$(printf '%s\n' "${{ env.WINDOWS_DOWNLOAD_LINK_KASPA }}" | sed -e 's/[\/&]/\\&/g')
          # Replace placeholders in the changelog template
          sed -i "s/RELEASE_VERSION/${{ env.RELEASE_VERSION }}/g" build/changelog-template.md
          sed -i "s/WINDOWS_LINK_DYMENSION/$windows_dymension_link_escaped/g" build/changelog-template.md
          sed -i "s/WINDOWS_LINK_NEAR/$windows_near_link_escaped/g" build/changelog-template.md
          sed -i "s/WINDOWS_LINK_KASPA/$windows_kaspa_link_escaped/g" build/changelog-template.md

      - id: release
        name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: build/changelog-template.md
          files: |
            crynux-node-helium-v${{ env.RELEASE_VERSION }}-dymension-mac-arm64-signed.dmg
            crynux-node-helium-v${{ env.RELEASE_VERSION }}-near-mac-arm64-signed.dmg
            crynux-node-helium-v${{ env.RELEASE_VERSION }}-kaspa-mac-arm64-signed.dmg
    outputs:
      windows-download-link-dymension: ${{ env.WINDOWS_DOWNLOAD_LINK_DYMENSION }}
      windows-preview-link-dymension: ${{ env.WINDOWS_PREVIEW_LINK_DYMENSION }}
      windows-download-link-near: ${{ env.WINDOWS_DOWNLOAD_LINK_NEAR }}
      windows-preview-link-near: ${{ env.WINDOWS_PREVIEW_LINK_NEAR }}
      windows-download-link-kaspa: ${{ env.WINDOWS_DOWNLOAD_LINK_KASPA }}
      windows-preview-link-kaspa: ${{ env.WINDOWS_PREVIEW_LINK_KASPA }}
      mac-link-dymension: ${{ fromJSON(steps.release.outputs.assets)[0].browser_download_url }}
      mac-link-near: ${{ fromJSON(steps.release.outputs.assets)[1].browser_download_url }}
      mac-link-kaspa: ${{ fromJSON(steps.release.outputs.assets)[2].browser_download_url }}

  update-documentation:
    runs-on: ubuntu-22.04
    needs:
      - publish-release
    steps:
      - name: Dispatch event to the documentation repository
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT }}
          repository: ${{ github.repository_owner }}/documentation
          event-type: node-released
          client-payload: |-
            {
              "windows-download-link-dymension": "${{ needs.publish-release.outputs.windows-download-link-dymension }}",
              "windows-preview-link-dymension": "${{ needs.publish-release.outputs.windows-preview-link-dymension }}",
              "windows-download-link-near": "${{ needs.publish-release.outputs.windows-download-link-near }}",
              "windows-preview-link-near": "${{ needs.publish-release.outputs.windows-preview-link-near }}",
              "windows-download-link-kaspa": "${{ needs.publish-release.outputs.windows-download-link-kaspa }}",
              "windows-preview-link-kaspa": "${{ needs.publish-release.outputs.windows-preview-link-kaspa }}",
              "mac-link-dymension": "${{ needs.publish-release.outputs.mac-link-dymension }}",
              "mac-link-near": "${{ needs.publish-release.outputs.mac-link-near }}",
              "mac-link-kaspa": "${{ needs.publish-release.outputs.mac-link-kaspa }}",
              "release-version": "${{ env.RELEASE_VERSION }}"
            }
  update-docker-compose-project:
    runs-on: ubuntu-22.04
    needs:
      - publish-release
    steps:
      - name: Dispatch event to the docker-compose repository
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT }}
          repository: ${{ github.repository_owner }}/crynux-node-docker-compose
          event-type: node-released
          client-payload: |-
            {
              "release-version": "${{ env.RELEASE_VERSION }}"
            }
